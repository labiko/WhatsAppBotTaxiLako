// ========================================
// TESTS UNITAIRES - SERVICE DE RECHERCHE
// ========================================

import { 
  initializeSearchService,
  searchLocationGeneric,
  searchInDatabaseSmart,
  searchInGooglePlaces,
  searchLocation,
  searchLocationWithSuggestions,
  normalizeText,
  generatePermutations,
  SearchResult,
  SearchConfig
} from './search-service';

// Configuration de test
const testConfig: SearchConfig = {
  supabaseUrl: process.env.SUPABASE_URL || 'https://test.supabase.co',
  supabaseKey: process.env.SUPABASE_KEY || 'test-key',
  googleApiKey: process.env.GOOGLE_API_KEY,
  primarySource: 'database',
  fuzzyThreshold: 0.3,
  maxSuggestions: 10,
  logLevel: 'debug'
};

// ========================================
// TESTS DES FONCTIONS INDIVIDUELLES
// ========================================

// Test direct de searchInGooglePlaces
export async function testSearchInGooglePlacesDirectly() {
  console.log('\nüß™ TEST DIRECT: searchInGooglePlaces');
  
  // Initialiser le service
  initializeSearchService(testConfig);
  
  // Appeler directement la fonction
  const results = await searchInGooglePlaces('restaurant conakry', {
    maxResults: 5
  });
  
  console.log(`üìä ${results.length} r√©sultats Google Places`);
  results.forEach(r => {
    console.log(`  - ${r.name} (${r.source})`);
  });
}

// Test direct de searchInDatabaseSmart
export async function testSearchInDatabaseSmartDirectly() {
  console.log('\nüß™ TEST DIRECT: searchInDatabaseSmart');
  
  initializeSearchService(testConfig);
  
  const results = await searchInDatabaseSmart('march√© madina', {
    logLevel: 'detailed'
  });
  
  console.log(`üìä ${results.length} r√©sultats database`);
  results.forEach(r => {
    console.log(`  - ${r.name} (${r.source}, score: ${r.score})`);
  });
}

// Test des fonctions utilitaires
export async function testUtilityFunctions() {
  console.log('\nüß™ TEST: Fonctions utilitaires');
  
  // Test normalizeText
  const normalized = normalizeText('Caf√©-Restaurant "Le Bon C√¥t√©"');
  console.log(`Normalis√©: "${normalized}"`);
  
  // Test generatePermutations
  const perms = generatePermutations(['march√©', 'madina', 'centre']);
  console.log(`Permutations (${perms.length}):`, perms);
}

// Test de la fonction simplifi√©e pour le bot
export async function testSearchLocationForBot() {
  console.log('\nüß™ TEST: searchLocation (fonction bot)');
  
  const result = await searchLocation('2LK Restaurant', testConfig.supabaseUrl, testConfig.supabaseKey);
  
  if (result) {
    console.log('‚úÖ R√©sultat trouv√©:', {
      nom: result.nom,
      latitude: result.latitude,
      longitude: result.longitude
    });
  } else {
    console.log('‚ùå Aucun r√©sultat');
  }
}

// ========================================
// SUITE DE TESTS COMPL√àTE
// ========================================

export class SearchServiceTests {
  constructor() {
    // Initialiser le service au d√©marrage
    initializeSearchService(testConfig);
  }

  // === TEST 1: Recherche exacte ===
  async testExactSearch() {
    console.log('\nüß™ TEST 1: Recherche exacte');
    const results = await this.service.searchLocationGeneric('March√© Madina');
    
    this.assertResults(results, {
      minCount: 1,
      expectedSource: 'database_exact',
      expectedName: 'March√© Madina'
    });
  }

  // === TEST 2: Permutation des mots ===
  async testWordPermutation() {
    console.log('\nüß™ TEST 2: Permutation des mots');
    const results = await this.service.searchLocationGeneric('Madina March√©');
    
    this.assertResults(results, {
      minCount: 1,
      expectedSource: 'database_permutation',
      expectedName: 'March√© Madina'
    });
  }

  // === TEST 3: Fautes de frappe ===
  async testFuzzyTypo() {
    console.log('\nüß™ TEST 3: Fautes de frappe');
    const results = await this.service.searchLocationGeneric('mardina march√©');
    
    this.assertResults(results, {
      minCount: 1,
      expectedSources: ['database_fuzzy', 'database_permutation'],
      nameContains: 'Madina'
    });
  }

  // === TEST 4: Recherche partielle ===
  async testPartialSearch() {
    console.log('\nüß™ TEST 4: Recherche partielle');
    const results = await this.service.searchLocationGeneric('h√¥pital ignace');
    
    this.assertResults(results, {
      minCount: 1,
      expectedSource: 'database_partial',
      nameContains: 'Ignace Deen'
    });
  }

  // === TEST 5: Limite de r√©sultats ===
  async testMaxResults() {
    console.log('\nüß™ TEST 5: Limite de r√©sultats');
    const results = await this.service.searchLocationGeneric('restaurant', {
      maxResults: 5
    });
    
    console.assert(results.length <= 5, `‚ùå Attendu max 5 r√©sultats, re√ßu ${results.length}`);
    console.log(`‚úÖ Limite respect√©e: ${results.length} r√©sultats`);
  }

  // === TEST 6: Mots multiples ===
  async testMultipleWords() {
    console.log('\nüß™ TEST 6: Recherche multi-mots');
    const results = await this.service.searchLocationGeneric('centre commercial carrefour');
    
    this.assertResults(results, {
      minCount: 0, // Peut ne pas exister
      logMatches: true
    });
  }

  // === TEST 7: Recherche vide ===
  async testEmptySearch() {
    console.log('\nüß™ TEST 7: Recherche vide');
    const results = await this.service.searchLocationGeneric('');
    
    console.assert(results.length === 0, '‚ùå Recherche vide devrait retourner 0 r√©sultats');
    console.log('‚úÖ Recherche vide g√©r√©e correctement');
  }

  // === TEST 8: Caract√®res sp√©ciaux ===
  async testSpecialCharacters() {
    console.log('\nüß™ TEST 8: Caract√®res sp√©ciaux');
    const results = await this.service.searchLocationGeneric('Caf√©-Restaurant "Le Bon Coin"');
    
    console.log(`üìä ${results.length} r√©sultats trouv√©s`);
    this.printResults(results.slice(0, 3));
  }

  // === TEST 9: Performance ===
  async testPerformance() {
    console.log('\nüß™ TEST 9: Test de performance');
    
    const queries = [
      'march√©',
      'h√¥pital',
      'restaurant',
      'pharmacie',
      '√©cole'
    ];
    
    const times: number[] = [];
    
    for (const query of queries) {
      const start = Date.now();
      await this.service.searchLocationGeneric(query);
      const elapsed = Date.now() - start;
      times.push(elapsed);
      console.log(`‚è±Ô∏è "${query}": ${elapsed}ms`);
    }
    
    const avg = times.reduce((a, b) => a + b, 0) / times.length;
    console.log(`üìä Temps moyen: ${avg.toFixed(0)}ms`);
    console.assert(avg < 1000, `‚ùå Performance d√©grad√©e: ${avg}ms en moyenne`);
  }

  // === TEST 10: Logs d√©taill√©s ===
  async testDetailedLogs() {
    console.log('\nüß™ TEST 10: V√©rification des logs');
    
    this.service.clearLogs();
    await this.service.searchLocationGeneric('2LK Restaurant');
    
    const logs = this.service.getLogs();
    console.log(`üìù ${logs.length} entr√©es de log g√©n√©r√©es`);
    
    // V√©rifier pr√©sence de logs cl√©s
    const hasSearchLog = logs.some(l => l.includes('RECHERCHE G√âN√âRIQUE'));
    const hasResultLog = logs.some(l => l.includes('r√©sultats'));
    
    console.assert(hasSearchLog, '‚ùå Log de recherche manquant');
    console.assert(hasResultLog, '‚ùå Log de r√©sultat manquant');
    console.log('‚úÖ Logs correctement g√©n√©r√©s');
  }

  // === HELPERS ===
  
  private assertResults(results: SearchResult[], expectations: {
    minCount?: number;
    expectedSource?: string;
    expectedSources?: string[];
    expectedName?: string;
    nameContains?: string;
    logMatches?: boolean;
  }) {
    // V√©rifier le nombre de r√©sultats
    if (expectations.minCount !== undefined) {
      console.assert(
        results.length >= expectations.minCount,
        `‚ùå Attendu au moins ${expectations.minCount} r√©sultats, re√ßu ${results.length}`
      );
    }
    
    if (results.length === 0) {
      console.log('‚ö†Ô∏è Aucun r√©sultat trouv√©');
      return;
    }
    
    // V√©rifier la source
    if (expectations.expectedSource) {
      const hasSource = results.some(r => r.source === expectations.expectedSource);
      console.assert(hasSource, `‚ùå Source attendue: ${expectations.expectedSource}`);
    }
    
    if (expectations.expectedSources) {
      const hasOneSource = results.some(r => 
        expectations.expectedSources!.includes(r.source)
      );
      console.assert(hasOneSource, `‚ùå Aucune des sources attendues trouv√©e`);
    }
    
    // V√©rifier le nom
    if (expectations.expectedName) {
      const hasName = results.some(r => r.name === expectations.expectedName);
      console.assert(hasName, `‚ùå Nom attendu: ${expectations.expectedName}`);
    }
    
    if (expectations.nameContains) {
      const hasPartial = results.some(r => 
        r.name.toLowerCase().includes(expectations.nameContains!.toLowerCase())
      );
      console.assert(hasPartial, `‚ùå Aucun r√©sultat ne contient: ${expectations.nameContains}`);
    }
    
    // Afficher les r√©sultats
    console.log(`‚úÖ ${results.length} r√©sultats trouv√©s`);
    this.printResults(results.slice(0, 3));
    
    if (expectations.logMatches) {
      this.printDetailedMatches(results);
    }
  }
  
  private printResults(results: SearchResult[]) {
    results.forEach((r, i) => {
      console.log(`  ${i + 1}. ${r.name} (${r.source}, score: ${r.score})`);
      if (r.matchDetails) {
        console.log(`     ‚Üí Strat√©gie: ${r.matchDetails.strategy}`);
        if (r.matchDetails.matchedWith) {
          console.log(`     ‚Üí Match√© avec: "${r.matchDetails.matchedWith}"`);
        }
      }
    });
  }
  
  private printDetailedMatches(results: SearchResult[]) {
    console.log('\nüìã D√©tails des correspondances:');
    results.forEach(r => {
      console.log(`\n‚Ä¢ ${r.name}`);
      console.log(`  - Source: ${r.source}`);
      console.log(`  - Score: ${r.score}`);
      console.log(`  - Adresse: ${r.address}`);
      if (r.coords) {
        console.log(`  - Coordonn√©es: ${r.coords.lat}, ${r.coords.lng}`);
      }
      if (r.matchDetails) {
        console.log(`  - D√©tails:`, r.matchDetails);
      }
    });
  }

  // === RUNNER ===
  async runAllTests() {
    console.log('üöÄ D√âMARRAGE DES TESTS UNITAIRES');
    console.log('================================\n');
    
    const tests = [
      this.testExactSearch,
      this.testWordPermutation,
      this.testFuzzyTypo,
      this.testPartialSearch,
      this.testMaxResults,
      this.testMultipleWords,
      this.testEmptySearch,
      this.testSpecialCharacters,
      this.testPerformance,
      this.testDetailedLogs
    ];
    
    let passed = 0;
    let failed = 0;
    
    for (const test of tests) {
      try {
        await test.call(this);
        passed++;
      } catch (error) {
        failed++;
        console.error(`‚ùå Erreur: ${error.message}`);
      }
    }
    
    console.log('\n================================');
    console.log(`üìä R√âSUM√â: ${passed} tests r√©ussis, ${failed} √©checs`);
    console.log('================================\n');
  }
}

// ========================================
// EX√âCUTION DES TESTS
// ========================================

// Pour ex√©cuter les tests:
/*
const tester = new SearchServiceTests();
await tester.runAllTests();

// Ou ex√©cuter un test sp√©cifique:
await tester.testFuzzyTypo();
*/

// Export pour utilisation
export function runSearchTests() {
  const tester = new SearchServiceTests();
  return tester.runAllTests();
}