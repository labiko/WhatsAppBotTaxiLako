-- =====================================================
-- üóëÔ∏è SUPPRESSION TRIGGER CONFLICTUEL - SOLUTION D√âFINITIVE
-- =====================================================
-- 
-- PROBL√àME : Trigger trigger_reservation_accepted interf√®re avec service C#
-- SOLUTION : Supprimer le trigger, garder uniquement le service C# fonctionnel
-- AVANTAGE : 1 seul syst√®me de notification au lieu de 2 qui se marchent dessus
--
-- =====================================================

-- Supprimer le trigger probl√©matique
DROP TRIGGER IF EXISTS trigger_reservation_accepted ON reservations;

-- Supprimer la fonction associ√©e
DROP FUNCTION IF EXISTS notify_client_on_reservation_accepted();

-- V√©rifier que la suppression a r√©ussi
SELECT 
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_trigger 
      WHERE tgname = 'trigger_reservation_accepted'
    ) THEN '‚ùå ERREUR - Trigger encore pr√©sent'
    ELSE '‚úÖ SUCC√àS - Trigger supprim√©'
  END as trigger_status;

SELECT 
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_proc 
      WHERE proname = 'notify_client_on_reservation_accepted'
    ) THEN '‚ùå ERREUR - Fonction encore pr√©sente'
    ELSE '‚úÖ SUCC√àS - Fonction supprim√©e'
  END as function_status;

-- üìä RAPPORT FINAL
SELECT 'üéØ SOLUTION APPLIQU√âE - SEUL LE SERVICE C# G√àRE LES NOTIFICATIONS' as status;
SELECT '‚úÖ Plus de conflit trigger vs service C#' as avantage_1;
SELECT '‚úÖ Notifications scheduled fonctionnelles via service C# uniquement' as avantage_2;
SELECT '‚úÖ Z√©ro risque de r√©gression' as avantage_3;

-- üìã RAPPEL IMPORTANT
SELECT '‚ö†Ô∏è  RAPPEL : Le service C# doit tourner r√©guli√®rement pour traiter notifications_pending' as rappel;