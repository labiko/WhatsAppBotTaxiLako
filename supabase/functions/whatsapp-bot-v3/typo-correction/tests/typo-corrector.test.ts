// ========================================
// TESTS UNITAIRES CORRECTION ORTHOGRAPHIQUE
// ========================================

import { TypoCorrector } from '../typo-corrector.ts';
import { 
  ULTRA_SAFE_CONFIG, 
  DEVELOPMENT_CONFIG, 
  createCustomConfig 
} from '../config/typo-config.ts';

/**
 * Suite de tests de non-r√©gression et fonctionnels
 * Garantit le fonctionnement correct du syst√®me de correction
 */

// =====================================================
// TESTS DE NON-R√âGRESSION (PRIORIT√â ABSOLUE)
// =====================================================

/**
 * Tests critiques: V√©rification que la correction d√©sactiv√©e ne fait rien
 */
function testDisabledCorrection() {
  console.log('üß™ === TESTS NON-R√âGRESSION - CORRECTION D√âSACTIV√âE ===');
  
  const corrector = new TypoCorrector(ULTRA_SAFE_CONFIG); // enabled: false
  
  const testQueries = [
    'madina',
    'a√©roport', 
    'h√¥pital',
    '√©cole primaire',
    'poste de police lambanyi',
    'aerport',  // M√™me avec faute, ne doit pas corriger
    'hopital'   // M√™me avec faute, ne doit pas corriger
  ];
  
  let passed = 0;
  let total = testQueries.length;
  
  for (const query of testQueries) {
    const result = corrector.correctQuery(query);
    
    // V√©rifications critiques de non-r√©gression
    const isUnchanged = result.corrected === query;
    const isNotChanged = !result.changed;
    const hasNoCorrections = result.appliedCorrections.length === 0;
    
    if (isUnchanged && isNotChanged && hasNoCorrections) {
      console.log(`‚úÖ "${query}" ‚Üí inchang√© (correct)`);
      passed++;
    } else {
      console.log(`‚ùå "${query}" ‚Üí "${result.corrected}" (R√âGRESSION D√âTECT√âE!)`);
    }
  }
  
  console.log(`üìä Tests non-r√©gression: ${passed}/${total} ${passed === total ? '‚úÖ' : '‚ùå'}`);
  return passed === total;
}

/**
 * Tests de performance: V√©rification des temps de traitement
 */
function testPerformanceGuarantees() {
  console.log('\nüß™ === TESTS PERFORMANCE ===');
  
  const corrector = new TypoCorrector({
    ...DEVELOPMENT_CONFIG,
    enabled: true,
    maxProcessingTimeMs: 10
  });
  
  const testQueries = [
    'aerport',
    'hopital national',
    'ecole primaire lambanyi',
    'taksi moto pr ale madina',
    'voitr batiman restoran sinema'
  ];
  
  let passed = 0;
  let maxTime = 0;
  
  for (const query of testQueries) {
    const result = corrector.correctQuery(query);
    
    if (result.processingTimeMs <= 10) {
      console.log(`‚ö° "${query}" ‚Üí ${result.processingTimeMs}ms ‚úÖ`);
      passed++;
    } else {
      console.log(`üêå "${query}" ‚Üí ${result.processingTimeMs}ms ‚ùå (trop lent)`);
    }
    
    maxTime = Math.max(maxTime, result.processingTimeMs);
  }
  
  console.log(`üìä Performance: ${passed}/${testQueries.length} sous 10ms (max: ${maxTime}ms)`);
  return passed === testQueries.length;
}

// =====================================================
// TESTS FONCTIONNELS PAR CAT√âGORIE
// =====================================================

/**
 * Tests accents fran√ßais - Cat√©gorie la plus s√ªre
 */
function testFrenchAccents() {
  console.log('\nüß™ === TESTS ACCENTS FRAN√áAIS ===');
  
  const corrector = new TypoCorrector({
    ...createCustomConfig({
      enabled: true,
      enableAccentCorrection: true,
      enableSmsCorrection: false,
      enablePhoneticCorrection: false,
      enableGuineaPlacesCorrection: false,
      enableCommonTyposCorrection: false,
      minConfidenceThreshold: 0.9
    })
  });
  
  const testCases = [
    // Corrections attendues
    { input: 'aerport', expected: 'a√©roport', shouldChange: true },
    { input: 'hopital', expected: 'h√¥pital', shouldChange: true },
    { input: 'ecole', expected: '√©cole', shouldChange: true },
    { input: 'hotel', expected: 'h√¥tel', shouldChange: true },
    
    // Pr√©servation (d√©j√† corrects)
    { input: 'a√©roport', expected: 'a√©roport', shouldChange: false },
    { input: 'h√¥pital', expected: 'h√¥pital', shouldChange: false },
    { input: '√©cole', expected: '√©cole', shouldChange: false },
    
    // Casse pr√©serv√©e
    { input: 'AERPORT', expected: 'A√âROPORT', shouldChange: true },
    { input: 'Hopital', expected: 'H√¥pital', shouldChange: true }
  ];
  
  let passed = 0;
  
  for (const testCase of testCases) {
    const result = corrector.correctQuery(testCase.input);
    const success = result.corrected === testCase.expected && result.changed === testCase.shouldChange;
    
    console.log(`${success ? '‚úÖ' : '‚ùå'} "${testCase.input}" ‚Üí "${result.corrected}" ${testCase.shouldChange ? '(chang√©)' : '(inchang√©)'}`);
    
    if (success) passed++;
  }
  
  console.log(`üìä Accents fran√ßais: ${passed}/${testCases.length}`);
  return passed === testCases.length;
}

/**
 * Tests lieux guin√©ens - Sp√©cificit√© locale
 */
function testGuineaPlaces() {
  console.log('\nüß™ === TESTS LIEUX GUIN√âENS ===');
  
  const corrector = new TypoCorrector({
    ...createCustomConfig({
      enabled: true,
      enableAccentCorrection: false,
      enableSmsCorrection: false,
      enablePhoneticCorrection: false,
      enableGuineaPlacesCorrection: true,
      enableCommonTyposCorrection: false
    })
  });
  
  const testCases = [
    // Corrections orthographiques locales
    { input: 'lambayi', expected: 'lambanyi', shouldChange: true },
    { input: 'bambeto', expected: 'bamb√©to', shouldChange: true },
    { input: 'kipe', expected: 'kip√©', shouldChange: true },
    
    // Pr√©servation (corrects)
    { input: 'lambanyi', expected: 'lambanyi', shouldChange: false },
    { input: 'madina', expected: 'madina', shouldChange: false },
    { input: 'ratoma', expected: 'ratoma', shouldChange: false },
    
    // Phrases compl√®tes
    { input: 'poste de police lambayi', expected: 'poste de police lambanyi', shouldChange: true }
  ];
  
  let passed = 0;
  
  for (const testCase of testCases) {
    const result = corrector.correctQuery(testCase.input);
    const success = result.corrected === testCase.expected && result.changed === testCase.shouldChange;
    
    console.log(`${success ? '‚úÖ' : '‚ùå'} "${testCase.input}" ‚Üí "${result.corrected}"`);
    
    if (success) passed++;
  }
  
  console.log(`üìä Lieux guin√©ens: ${passed}/${testCases.length}`);
  return passed === testCases.length;
}

/**
 * Tests fautes courantes
 */
function testCommonTypos() {
  console.log('\nüß™ === TESTS FAUTES COURANTES ===');
  
  const corrector = new TypoCorrector({
    ...createCustomConfig({
      enabled: true,
      enableAccentCorrection: false,
      enableSmsCorrection: false,
      enablePhoneticCorrection: false,
      enableGuineaPlacesCorrection: false,
      enableCommonTyposCorrection: true
    })
  });
  
  const testCases = [
    { input: 'hoptal', expected: 'h√¥pital', shouldChange: true },
    { input: 'voitre', expected: 'voiture', shouldChange: true },
    { input: 'restrant', expected: 'restaurant', shouldChange: true },
    { input: 'apartemnt', expected: 'appartement', shouldChange: true }
  ];
  
  let passed = 0;
  
  for (const testCase of testCases) {
    const result = corrector.correctQuery(testCase.input);
    const success = result.corrected === testCase.expected && result.changed === testCase.shouldChange;
    
    console.log(`${success ? '‚úÖ' : '‚ùå'} "${testCase.input}" ‚Üí "${result.corrected}"`);
    
    if (success) passed++;
  }
  
  console.log(`üìä Fautes courantes: ${passed}/${testCases.length}`);
  return passed === testCases.length;
}

// =====================================================
// TESTS D'INT√âGRATION
// =====================================================

/**
 * Tests int√©gration compl√®te - Toutes cat√©gories activ√©es
 */
function testFullIntegration() {
  console.log('\nüß™ === TESTS INT√âGRATION COMPL√àTE ===');
  
  const corrector = new TypoCorrector({
    ...DEVELOPMENT_CONFIG,
    enabled: true,
    enableAccentCorrection: true,
    enableCommonTyposCorrection: true,
    enableGuineaPlacesCorrection: true,
    enableSmsCorrection: true,
    enablePhoneticCorrection: true
  });
  
  const testCases = [
    // Corrections multiples possibles (priorisation)
    { input: 'hoptal ignac din', expected: 'h√¥pital ignace deen' },
    { input: 'aerport gbessia', expected: 'a√©roport gbessia' },
    { input: 'ecole lambayi', expected: '√©cole lambanyi' },
    
    // Correction unique √©vidente
    { input: 'taksi', expected: 'taxi' },
    { input: 'pr ale madina', expected: 'pour aller madina' }
  ];
  
  let passed = 0;
  
  for (const testCase of testCases) {
    const result = corrector.correctQuery(testCase.input);
    const isImproved = result.changed && result.success;
    
    console.log(`${isImproved ? '‚úÖ' : 'üìù'} "${testCase.input}" ‚Üí "${result.corrected}" (${result.appliedCorrections.length} corrections)`);
    
    // Logging des corrections appliqu√©es
    result.appliedCorrections.forEach(c => {
      console.log(`   üîß [${c.category.toUpperCase()}] "${c.from}" ‚Üí "${c.to}" (${(c.confidence * 100).toFixed(1)}%)`);
    });
    
    if (isImproved) passed++;
  }
  
  console.log(`üìä Int√©gration compl√®te: ${passed}/${testCases.length} am√©lior√©es`);
  return passed >= Math.floor(testCases.length * 0.8); // 80% de succ√®s minimum
}

// =====================================================
// FONCTION PRINCIPALE D'EX√âCUTION DES TESTS
// =====================================================

/**
 * Ex√©cute tous les tests et retourne le rapport final
 */
export function runAllTests(): boolean {
  console.log('üöÄ === D√âMARRAGE TESTS CORRECTION ORTHOGRAPHIQUE ===\n');
  
  const results = [
    testDisabledCorrection(),    // CRITIQUE: Non-r√©gression
    testPerformanceGuarantees(), // CRITIQUE: Performance
    testFrenchAccents(),         // Fonctionnel: Accents
    testGuineaPlaces(),          // Fonctionnel: Guin√©e
    testCommonTypos(),           // Fonctionnel: Fautes
    testFullIntegration()        // Int√©gration: Complet
  ];
  
  const passed = results.filter(r => r).length;
  const total = results.length;
  
  console.log(`\nüìä === RAPPORT FINAL TESTS ===`);
  console.log(`‚úÖ Tests r√©ussis: ${passed}/${total}`);
  console.log(`üìà Taux de r√©ussite: ${(passed/total*100).toFixed(1)}%`);
  
  if (passed === total) {
    console.log(`üéâ TOUS LES TESTS PASS√âS - SYST√àME PR√äT POUR D√âPLOIEMENT`);
  } else {
    console.log(`‚ö†Ô∏è TESTS √âCHOU√âS - V√âRIFIER AVANT D√âPLOIEMENT`);
  }
  
  return passed === total;
}

// Auto-ex√©cution des tests si lanc√© directement
if (import.meta.main) {
  runAllTests();
}