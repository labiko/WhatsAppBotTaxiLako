import { serve } from "https://deno.land/std@0.177.0/http/server.ts"

// Headers CORS complets pour webhooks
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',
  'Access-Control-Allow-Credentials': 'false'
}

// Configuration Supabase
const SUPABASE_URL = 'https://nmwnibzgvwltipmtwhzo.supabase.co'
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzE4NjkwMywiZXhwIjoyMDY4NzYyOTAzfQ._TeinxeQLZKSowSCUswDR54WejQp1c9y_tkn6MLYh_M'
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODY5MDMsImV4cCI6MjA2ODc2MjkwM30.cmOT0pwKr0T7DyR7FjF9lr2Aea3A3OfOytEfhi0GQ4U'

// Sessions en m√©moire
const sessions = new Map<string, { vehicle_type?: string; timestamp: number }>()
const SESSION_TIMEOUT = 30 * 60 * 1000 // 30 minutes

const cleanupSessions = () => {
  const now = Date.now()
  for (const [phone, session] of sessions.entries()) {
    if (now - session.timestamp > SESSION_TIMEOUT) {
      sessions.delete(phone)
    }
  }
}

// Insertion r√©servation avec bypass RLS
async function insertReservation(clientPhone: string, vehicleType: string, latitude: string, longitude: string) {
  const point = `POINT(${longitude} ${latitude})`
  
  try {
    // Utilisation de la cl√© service_role qui bypass RLS automatiquement
    const response = await fetch(`${SUPABASE_URL}/rest/v1/reservations`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
        'apikey': SUPABASE_SERVICE_KEY,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify({
        client_phone: clientPhone,
        vehicle_type: vehicleType,
        pickup_location: point,
        status: 'pending'
      })
    })
    
    const result = await response.json()
    
    if (!response.ok) {
      console.error('Erreur Supabase:', response.status, result)
      return { success: false, error: result }
    }
    
    return { success: true, data: result }
  } catch (error) {
    console.error('Erreur r√©seau:', error)
    return { success: false, error: error.message }
  }
}

serve(async (req: Request): Promise<Response> => {
  console.log(`=== WEBHOOK RECU ===`)
  console.log(`M√©thode: ${req.method}`)
  console.log(`URL: ${req.url}`)
  console.log(`Headers:`, Object.fromEntries(req.headers.entries()))
  
  // Gestion CORS - toujours en premier
  if (req.method === 'OPTIONS') {
    console.log('Requ√™te OPTIONS - retour CORS')
    return new Response('ok', { 
      status: 200,
      headers: corsHeaders 
    })
  }
  
  // V√©rification m√©thode
  if (req.method !== 'POST') {
    console.log(`M√©thode ${req.method} non support√©e`)
    return new Response('Method not allowed', { 
      status: 405, 
      headers: corsHeaders 
    })
  }

  try {
    // Parse le body
    let formData: FormData
    try {
      const contentType = req.headers.get('content-type') || ''
      console.log(`Content-Type: ${contentType}`)
      
      if (contentType.includes('application/x-www-form-urlencoded')) {
        formData = await req.formData()
        console.log('FormData pars√©e avec succ√®s')
      } else {
        console.log('Content-Type non support√©, tentative de parsing FormData...')
        formData = await req.formData()
      }
    } catch (e) {
      console.error('Erreur parsing body:', e)
      return new Response('Invalid request format', { 
        status: 400, 
        headers: corsHeaders 
      })
    }
    
    // Log des donn√©es re√ßues
    console.log('Donn√©es FormData:')
    for (const [key, value] of formData.entries()) {
      console.log(`  ${key}: ${value}`)
    }
    
    // Extraction des donn√©es Twilio
    const from = formData.get('From')?.toString() || ''
    const body = formData.get('Body')?.toString()?.toLowerCase().trim() || ''
    const latitude = formData.get('Latitude')?.toString() || ''
    const longitude = formData.get('Longitude')?.toString() || ''
    const mediaUrl = formData.get('MediaUrl0')?.toString() || ''
    
    const clientPhone = from.replace('whatsapp:', '').trim()
    
    if (!clientPhone) {
      console.log('Num√©ro de t√©l√©phone manquant')
      return new Response('Missing phone number', { 
        status: 400, 
        headers: corsHeaders 
      })
    }
    
    console.log(`üì± Client: ${clientPhone}`)
    console.log(`üí¨ Message: "${body}"`)
    console.log(`üìç Coords: ${latitude ? `${latitude}, ${longitude}` : 'aucune'}`)
    
    cleanupSessions()
    
    let responseMessage = ''
    
    // === LOGIQUE CHATBOT ===
    if (body.includes('taxi') || body.includes('je veux un taxi')) {
      // √âtape 1: Demande de taxi
      sessions.set(clientPhone, { timestamp: Date.now() })
      responseMessage = "Quel type de taxi souhaitez-vous ? (R√©pondez par 'moto' ou 'voiture')"
      console.log(`‚úÖ Session cr√©√©e pour ${clientPhone}`)
      
    } else if (body === 'moto' || body === 'voiture') {
      // √âtape 2: Choix du v√©hicule
      const session = sessions.get(clientPhone)
      if (session) {
        sessions.set(clientPhone, { 
          vehicle_type: body, 
          timestamp: Date.now() 
        })
        responseMessage = "Merci. Veuillez partager votre position en cliquant sur l'ic√¥ne (üìé) puis 'Localisation'."
        console.log(`üöó V√©hicule choisi: ${body}`)
      } else {
        responseMessage = "Pour r√©server un taxi, veuillez √©crire 'taxi' d'abord."
        console.log('‚ö†Ô∏è Aucune session trouv√©e')
      }
      
    } else if (latitude && longitude) {
      // √âtape 3: R√©ception localisation
      const session = sessions.get(clientPhone)
      if (session && session.vehicle_type) {
        console.log(`üéØ Insertion r√©servation: ${session.vehicle_type} √† [${latitude}, ${longitude}]`)
        
        const result = await insertReservation(clientPhone, session.vehicle_type, latitude, longitude)
        
        if (result.success) {
          responseMessage = `Votre demande de taxi ${session.vehicle_type} a √©t√© enregistr√©e. Un chauffeur vous contactera bient√¥t.`
          sessions.delete(clientPhone)
          console.log('‚úÖ R√©servation cr√©√©e avec succ√®s')
          console.log('Donn√©es ins√©r√©es:', result.data)
        } else {
          responseMessage = "Erreur lors de l'enregistrement. Veuillez r√©essayer."
          console.error('‚ùå Erreur insertion:', result.error)
        }
      } else {
        responseMessage = "Pour r√©server, √©crivez d'abord 'taxi' et suivez les instructions."
        console.log('‚ö†Ô∏è Session invalide pour localisation')
      }
      
    } else if (mediaUrl) {
      responseMessage = "Les messages vocaux seront bient√¥t disponibles. Pour r√©server, √©crivez 'taxi'."
      console.log(`üé§ Message vocal re√ßu: ${mediaUrl}`)
      
    } else {
      responseMessage = "Bienvenue chez LokoTaxi ! Pour r√©server un taxi, √©crivez 'taxi'."
      console.log(`‚ùì Message non reconnu: "${body}"`)
    }
    
    // === R√âPONSE TWIML ===
    const twiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Message>${responseMessage}</Message>
</Response>`
    
    console.log(`üì§ R√©ponse TwiML: ${responseMessage}`)
    console.log(`=== FIN WEBHOOK ===\n`)
    
    return new Response(twiml, {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/xml; charset=utf-8'
      }
    })
    
  } catch (error) {
    console.error('üí• ERREUR GLOBALE:', error)
    console.error('Stack:', error.stack)
    
    const errorTwiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Message>Service indisponible. R√©essayez dans quelques minutes.</Message>
</Response>`
    
    return new Response(errorTwiml, {
      status: 200, // 200 pour √©viter les retry Twilio
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/xml; charset=utf-8'
      }
    })
  }
})