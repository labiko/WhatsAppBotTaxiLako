import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE'
};
const SUPABASE_URL = 'https://nmwnibzgvwltipmtwhzo.supabase.co';
// Utilisation de la cl√© API service_role (doit √™tre r√©cup√©r√©e depuis Settings > API Keys)
// ATTENTION: Cette cl√© pourrait avoir expir√©, aller dans Dashboard ‚Üí Settings ‚Üí API Keys pour la nouvelle
// Cl√© API service_role confirm√©e (2025-07-22 18:30)
// Cl√© service_role v√©rifi√©e depuis Dashboard (2025-07-22 18:45)
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzE4NjkwMywiZXhwIjoyMDY4NzYyOTAzfQ._TeinxeQLZKSowSCUswDR54WejQp1c9y_tkn6MLYh_M';
// Cl√© anon (publique) r√©cup√©r√©e depuis Dashboard (2025-07-22 18:45)
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODY5MDMsImV4cCI6MjA2ODc2MjkwM30.cmOT0pwKr0T7DyR7FjF9lr2Aea3A3OfOytEfhi0GQ4U';
// Sessions maintenant stock√©es dans Supabase au lieu de la m√©moire
let workingApiKey = SUPABASE_SERVICE_KEY // Par d√©faut on essaie service_role
;
const normalizePhone = (phone)=>{
  return phone.replace(/^whatsapp:/, '').replace(/\s+/g, '').trim();
};
// Fonction de retry avec backoff
async function fetchWithRetry(url, options, maxRetries = 3) {
  for(let i = 0; i < maxRetries; i++){
    try {
      console.log(`üîÑ Tentative ${i + 1}/${maxRetries}: ${url}`);
      const response = await fetch(url, options);
      if (response.status === 503) {
        console.log(`‚è≥ Service indisponible (503), retry dans ${(i + 1) * 1000}ms...`);
        if (i < maxRetries - 1) {
          await new Promise((resolve)=>setTimeout(resolve, (i + 1) * 1000));
          continue;
        }
      }
      return response;
    } catch (error) {
      console.log(`‚ùå Erreur tentative ${i + 1}: ${error.message}`);
      if (i === maxRetries - 1) throw error;
      await new Promise((resolve)=>setTimeout(resolve, (i + 1) * 1000));
    }
  }
  throw new Error('Max retries reached');
}
// Fonction pour inspecter la structure de la table conducteurs
async function inspectConducteursTable() {
  try {
    console.log('üîç Inspection de la table conducteurs...');
    // 1. Compter le nombre total de conducteurs
    const countResponse = await fetch(`${SUPABASE_URL}/rest/v1/conducteurs?select=count`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json',
        'Prefer': 'count=exact'
      }
    });
    if (countResponse.ok) {
      const countData = await countResponse.text();
      console.log('üìä Nombre total de conducteurs:', countData);
    }
    // 2. R√©cup√©rer un √©chantillon de conducteurs pour voir la structure
    const sampleResponse = await fetch(`${SUPABASE_URL}/rest/v1/conducteurs?select=*&limit=2`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json'
      }
    });
    if (sampleResponse.ok) {
      const sampleData = await sampleResponse.json();
      console.log('üìã √âchantillon conducteurs (2 premiers):');
      sampleData.forEach((c, index)=>{
        console.log(`   ${index + 1}. ID: ${c.id}`);
        console.log(`      Nom: ${c.prenom} ${c.nom}`);
        console.log(`      T√©l√©phone: ${c.telephone}`);
        console.log(`      Type v√©hicule: ${c.vehicle_type}`);
        console.log(`      Statut: ${c.statut}`);
        console.log(`      Position: ${JSON.stringify(c.position_actuelle)}`);
        console.log(`      Autres champs: ${Object.keys(c).join(', ')}`);
        console.log('      ---');
      });
    }
    // 3. Compter par type de v√©hicule
    const motoCount = await fetch(`${SUPABASE_URL}/rest/v1/conducteurs?vehicle_type=eq.moto&select=count`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json',
        'Prefer': 'count=exact'
      }
    });
    const voitureCount = await fetch(`${SUPABASE_URL}/rest/v1/conducteurs?vehicle_type=eq.voiture&select=count`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json',
        'Prefer': 'count=exact'
      }
    });
    if (motoCount.ok && voitureCount.ok) {
      const motoData = await motoCount.text();
      const voitureData = await voitureCount.text();
      console.log('üèçÔ∏è Conducteurs moto:', motoData);
      console.log('üöó Conducteurs voiture:', voitureData);
    }
    // 4. Compter par statut
    const disponibleCount = await fetch(`${SUPABASE_URL}/rest/v1/conducteurs?statut=eq.disponible&select=count`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json',
        'Prefer': 'count=exact'
      }
    });
    if (disponibleCount.ok) {
      const dispData = await disponibleCount.text();
      console.log('‚úÖ Conducteurs disponibles:', dispData);
    }
  } catch (error) {
    console.error('‚ùå Erreur inspection table:', error);
  }
}
// Test de connexion Supabase avec fallback vers les deux cl√©s
async function testDatabaseConnection() {
  console.log('üîÑ Test de connexion Supabase...');
  // Test 1: avec cl√© service_role
  try {
    console.log('üîë Test #1 avec cl√© service_role');
    const response1 = await fetch(`${SUPABASE_URL}/rest/v1/conducteurs?select=count`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
        'apikey': SUPABASE_SERVICE_KEY,
        'Content-Type': 'application/json',
        'Prefer': 'count=exact'
      }
    });
    console.log(`üì° Service_role status: ${response1.status}`);
    if (response1.ok) {
      const data = await response1.text();
      console.log('‚úÖ Connexion service_role OK:', data.substring(0, 100));
      workingApiKey = SUPABASE_SERVICE_KEY;
      // Inspecter la table une fois connect√©
      await inspectConducteursTable();
      return {
        connected: true,
        status: response1.status
      };
    } else {
      const errorText = await response1.text();
      console.log(`‚ùå Service_role failed (${response1.status}):`, errorText.substring(0, 200));
    }
  } catch (error) {
    console.log(`üí• Service_role exception:`, error.message);
  }
  // Test 2: avec cl√© anon (si service_role √©choue)
  if (SUPABASE_ANON_KEY !== 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODY5MDMsImV4cCI6MjA2ODc2MjkwM30.PLACEHOLDER') {
    try {
      console.log('üîë Test #2 avec cl√© anon');
      const response2 = await fetch(`${SUPABASE_URL}/rest/v1/conducteurs?select=count`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
          'apikey': SUPABASE_ANON_KEY,
          'Content-Type': 'application/json'
        }
      });
      console.log(`üì° Anon status: ${response2.status}`);
      if (response2.ok) {
        const data = await response2.text();
        console.log('‚úÖ Connexion anon OK:', data.substring(0, 100));
        workingApiKey = SUPABASE_ANON_KEY;
        return {
          connected: true,
          status: response2.status
        };
      } else {
        const errorText = await response2.text();
        console.log(`‚ùå Anon failed (${response2.status}):`, errorText.substring(0, 200));
        return {
          connected: false,
          error: errorText,
          status: response2.status
        };
      }
    } catch (error) {
      console.log(`üí• Anon exception:`, error.message);
      return {
        connected: false,
        error: error.message
      };
    }
  }
  return {
    connected: false,
    error: 'Toutes les cl√©s ont √©chou√©',
    status: 401
  };
}
// Fonction pour sauvegarder la session dans Supabase
async function saveSession(phone, data) {
  try {
    const sessionData = {
      client_phone: phone,
      vehicle_type: data.vehicleType || null,
      position_client: data.positionClient || null,
      destination_nom: data.destinationNom || null,
      destination_id: data.destinationId || null,
      destination_position: data.destinationPosition || null,
      distance_km: data.distanceKm || null,
      prix_estime: data.prixEstime || null,
      prix_confirme: data.prixConfirme || false,
      etat: data.etat || 'initial',
      updated_at: new Date().toISOString(),
      expires_at: new Date(Date.now() + 60 * 60 * 1000).toISOString() // 1 heure
    };

    const response = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/sessions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json',
        'Prefer': 'resolution=merge-duplicates'
      },
      body: JSON.stringify(sessionData)
    });

    // Si erreur 409 (duplicate), faire un UPDATE au lieu d'INSERT
    if (response.status === 409) {
      console.log(`üîÑ Session existe, mise √† jour pour ${phone}`);
      const updateData = { ...sessionData };
      delete updateData.client_phone; // Ne pas mettre √† jour la cl√© primaire
      
      const updateResponse = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/sessions?client_phone=eq.${encodeURIComponent(phone)}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${workingApiKey}`,
          'apikey': workingApiKey,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updateData)
      });

      if (updateResponse.ok) {
        console.log(`üíæ Session mise √† jour: ${phone} ‚Üí √âtat: ${data.etat}`);
      } else {
        const errorText = await updateResponse.text();
        console.error(`‚ùå Erreur mise √† jour session: ${updateResponse.status} - ${errorText}`);
      }
      return;
    }

    if (response.ok) {
      console.log(`üíæ Session sauv√©e: ${phone} ‚Üí √âtat: ${data.etat}`);
    } else {
      const errorText = await response.text();
      console.error(`‚ùå Erreur sauvegarde session: ${response.status} - ${errorText}`);
    }
  } catch (error) {
    console.error(`‚ùå Exception sauvegarde session: ${error.message}`);
  }
}

// Fonction pour r√©cup√©rer la session depuis Supabase
async function getSession(phone) {
  try {
    const response = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/sessions?client_phone=eq.${encodeURIComponent(phone)}&expires_at=gte.${new Date().toISOString()}`, {
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const sessions = await response.json();
      if (sessions.length > 0) {
        const session = sessions[0];
        return {
          vehicleType: session.vehicle_type,
          positionClient: session.position_client,
          destinationNom: session.destination_nom,
          destinationId: session.destination_id,
          destinationPosition: session.destination_position,
          distanceKm: session.distance_km,
          prixEstime: session.prix_estime,
          prixConfirme: session.prix_confirme,
          etat: session.etat,
          timestamp: new Date(session.updated_at).getTime()
        };
      }
    } else {
      console.error(`‚ùå Erreur r√©cup√©ration session: ${response.status}`);
    }
  } catch (error) {
    console.error(`‚ùå Exception r√©cup√©ration session: ${error.message}`);
  }
  
  return {};
}

// Fonction pour extraire les coordonn√©es client depuis PostGIS
async function getClientCoordinates(sessionPhone) {
  if (!sessionPhone) {
    console.log('‚ùå sessionPhone manquant pour extraction coordonn√©es');
    return { latitude: 0, longitude: 0 };
  }
  
  try {
    console.log(`üîç Extraction coordonn√©es pour session: ${sessionPhone}`);
    
    // CORRIG√â: Utiliser directement une requ√™te REST avec PostGIS au lieu de la fonction RPC d√©faillante
    const response = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/sessions?client_phone=eq.${encodeURIComponent(sessionPhone)}&select=position_client&limit=1`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const sessions = await response.json();
      console.log(`üîé DEBUG coordonn√©es client depuis PostGIS:`);
      
      if (sessions.length > 0 && sessions[0].position_client) {
        console.log(`   session.positionClient (binaire): ${sessions[0].position_client}`);
        
        // Utiliser une requ√™te s√©par√©e pour extraire les coordonn√©es avec ST_X et ST_Y
        const coordsResponse = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/sessions?client_phone=eq.${encodeURIComponent(sessionPhone)}&select=ST_Y(position_client::geometry)%20as%20latitude,ST_X(position_client::geometry)%20as%20longitude&limit=1`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${workingApiKey}`,
            'apikey': workingApiKey,
            'Content-Type': 'application/json',
            'Prefer': 'return=representation'
          }
        });
        
        if (coordsResponse.ok) {
          const coords = await coordsResponse.json();
          if (coords.length > 0) {
            const lat = parseFloat(coords[0].latitude) || 0;
            const lon = parseFloat(coords[0].longitude) || 0;
            
            console.log(`   clientLatitude extraite: ${lat}`);
            console.log(`   clientLongitude extraite: ${lon}`);
            
            if (lat !== 0 && lon !== 0) {
              console.log(`‚úÖ Coordonn√©es extraites avec succ√®s: lat=${lat}, lon=${lon}`);
              return { latitude: lat, longitude: lon };
            }
          }
        }
      }
    }
    
    console.log(`‚ö†Ô∏è Extraction PostGIS √©chou√©e, coordonn√©es par d√©faut (0,0)`);
    return { latitude: 0, longitude: 0 };
  } catch (error) {
    console.error(`‚ùå Erreur extraction coordonn√©es: ${error.message}`);
    return { latitude: 0, longitude: 0 };
  }
}

// Fonction pour nettoyer les sessions expir√©es dans Supabase
async function cleanExpiredSessions() {
  try {
    const response = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/rpc/clean_expired_sessions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      console.log('üßπ Sessions expir√©es nettoy√©es');
    }
  } catch (error) {
    console.error(`‚ùå Erreur nettoyage sessions: ${error.message}`);
  }
}
// R√©cup√©rer les conducteurs disponibles depuis Supabase avec la cl√© qui fonctionne
async function getAvailableDrivers(vehicleType) {
  try {
    console.log(`üîç Recherche conducteurs ${vehicleType} avec cl√©: ${workingApiKey === SUPABASE_ANON_KEY ? 'anon' : 'service_role'}`);
    const response = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/conducteurs_with_coords?vehicle_type=eq.${vehicleType}&statut=eq.disponible&select=*`, {
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json'
      }
    });
    console.log(`üì° Statut requ√™te conducteurs: ${response.status}`);
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Erreur: ${response.status} - ${errorText}`);
      throw new Error(`Erreur API: ${response.status} - ${errorText}`);
    }
    const conducteurs = await response.json();
    console.log(`üìã ${conducteurs.length} conducteur(s) ${vehicleType} trouv√©(s) dans la base`);
    if (conducteurs.length === 0) {
      console.log(`‚ö†Ô∏è Aucun conducteur ${vehicleType} disponible dans la table`);
    }
    return conducteurs;
  } catch (error) {
    console.error('‚ùå Exception r√©cup√©ration conducteurs:', error);
    throw error;
  }
}
// Calcul de distance avec Haversine
function calculateDistance(lat1, lon1, lat2, lon2) {
  console.log(`üßÆ DEBUG calculateDistance - ENTR√âE:`);
  console.log(`   lat1 (client): ${lat1}`);
  console.log(`   lon1 (client): ${lon1}`);
  console.log(`   lat2 (destination): ${lat2}`);
  console.log(`   lon2 (destination): ${lon2}`);
  
  const R = 6371; // Rayon de la Terre en km
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const lat1Rad = lat1 * Math.PI / 180;
  const lat2Rad = lat2 * Math.PI / 180;
  
  console.log(`üßÆ DEBUG calculateDistance - CALCULS:`);
  console.log(`   dLat: ${dLat}`);
  console.log(`   dLon: ${dLon}`);
  console.log(`   lat1Rad: ${lat1Rad}`);
  console.log(`   lat2Rad: ${lat2Rad}`);
  
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + 
            Math.cos(lat1Rad) * Math.cos(lat2Rad) * 
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const result = R * c;
  
  console.log(`üßÆ DEBUG calculateDistance - R√âSULTAT: ${result} km`);
  
  return result;
}
// Trouver le conducteur le plus proche depuis la table Supabase
async function findNearestDriver(vehicleType, clientLat, clientLng) {
  console.log(`üéØ Recherche conducteur ${vehicleType} pr√®s de ${clientLat}, ${clientLng}`);
  try {
    const conducteurs = await getAvailableDrivers(vehicleType);
    if (conducteurs.length === 0) {
      console.log(`‚ùå Aucun conducteur ${vehicleType} disponible dans la table 'conducteurs'`);
      return null;
    }
    let nearestDriver = null;
    let minDistance = Infinity;
    let validDriversCount = 0;
    console.log(`üìê Calcul distances pour ${conducteurs.length} conducteur(s)...`);
    for (const conducteur of conducteurs){
      // Utiliser les coordonn√©es extraites par ST_X et ST_Y
      const driverLat = conducteur.latitude;
      const driverLng = conducteur.longitude;
      
      if (driverLat && driverLng && !isNaN(driverLat) && !isNaN(driverLng)) {
        validDriversCount++;
        const distance = calculateDistance(clientLat, clientLng, driverLat, driverLng);
        console.log(`   ${conducteur.prenom} ${conducteur.nom}: ${distance.toFixed(1)} km (${driverLat}, ${driverLng})`);
        if (distance < minDistance) {
          minDistance = distance;
          nearestDriver = {
            ...conducteur,
            distance
          };
        }
      } else {
        console.log(`‚ö†Ô∏è Coordonn√©es manquantes pour ${conducteur.prenom} ${conducteur.nom}: lat=${driverLat}, lng=${driverLng}`);
      }
    }
    console.log(`üìä ${validDriversCount}/${conducteurs.length} conducteurs avec position GPS valide`);
    if (nearestDriver) {
      const distanceKm = nearestDriver.distance.toFixed(1);
      console.log(`üèÜ S√©lectionn√©: ${nearestDriver.prenom} ${nearestDriver.nom} √† ${distanceKm} km`);
      return nearestDriver;
    } else {
      console.log(`‚ùå Aucun conducteur avec position GPS valide trouv√©`);
      return null;
    }
  } catch (error) {
    console.error(`‚ùå Erreur lors de la recherche de conducteur:`, error);
    return null;
  }
}
// Fonction pour rechercher une adresse par nom
async function searchAdresse(searchTerm) {
  try {
    console.log(`üîç Recherche adresse: "${searchTerm}"`);
    
    // Appeler la fonction SQL search_adresse
    const response = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/rpc/search_adresse`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ search_term: searchTerm })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Erreur recherche adresse: ${response.status} - ${errorText}`);
      return null;
    }
    
    const adresses = await response.json();
    console.log(`üìç ${adresses.length} adresse(s) trouv√©e(s)`);
    
    if (adresses.length > 0) {
      // Retourner la premi√®re adresse (meilleure correspondance)
      return adresses[0];
    }
    
    return null;
  } catch (error) {
    console.error(`‚ùå Exception recherche adresse: ${error.message}`);
    return null;
  }
}

// Fonction pour calculer le prix d'une course
async function calculerPrixCourse(vehicleType, distanceKm) {
  try {
    console.log(`üí∞ Calcul prix: ${vehicleType}, ${distanceKm}km`);
    
    // Appeler la fonction SQL calculer_prix_course
    const response = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/rpc/calculer_prix_course`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${workingApiKey}`,
        'apikey': workingApiKey,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        p_vehicle_type: vehicleType,
        p_distance_km: distanceKm
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Erreur calcul prix: ${response.status} - ${errorText}`);
      
      // Tarif par d√©faut si erreur
      const tarifDefaut = vehicleType === 'moto' ? 3000 : 4000;
      const prixTotal = Math.ceil(distanceKm * tarifDefaut / 1000) * 1000;
      return {
        prix_total: prixTotal,
        prix_par_km: tarifDefaut,
        tarif_applique: 'Tarif par d√©faut'
      };
    }
    
    const resultats = await response.json();
    if (resultats.length > 0) {
      return resultats[0];
    }
    
    // Fallback si pas de r√©sultat
    const tarifDefaut = vehicleType === 'moto' ? 3000 : 4000;
    const prixTotal = Math.ceil(distanceKm * tarifDefaut / 1000) * 1000;
    return {
      prix_total: prixTotal,
      prix_par_km: tarifDefaut,
      tarif_applique: 'Tarif par d√©faut'
    };
  } catch (error) {
    console.error(`‚ùå Exception calcul prix: ${error.message}`);
    
    // Tarif par d√©faut en cas d'erreur
    const tarifDefaut = vehicleType === 'moto' ? 3000 : 4000;
    const prixTotal = Math.ceil(distanceKm * tarifDefaut / 1000) * 1000;
    return {
      prix_total: prixTotal,
      prix_par_km: tarifDefaut,
      tarif_applique: 'Tarif par d√©faut (erreur)'
    };
  }
}

serve(async (req)=>{
  if (req.method === 'OPTIONS') {
    return new Response('ok', {
      status: 200,
      headers: corsHeaders
    });
  }
  try {
    // V√©rifier le Content-Type pour √©viter l'erreur lors des tests directs
    const contentType = req.headers.get('Content-Type') || '';
    
    let from = '';
    let body = '';
    let latitude = '';
    let longitude = '';
    
    if (contentType.includes('application/x-www-form-urlencoded')) {
      // Requ√™te Twilio normale avec FormData
      const formData = await req.formData();
      from = formData.get('From')?.toString() || '';
      body = formData.get('Body')?.toString()?.trim() || '';
      latitude = formData.get('Latitude')?.toString() || '';
      longitude = formData.get('Longitude')?.toString() || '';
    } else {
      // Test direct de l'URL ou autre type de requ√™te
      body = 'test';
      from = 'test';
    }
    const clientPhone = normalizePhone(from);
    const messageText = body.toLowerCase();
    const hasLocation = latitude && longitude && latitude !== '' && longitude !== '';
    console.log(`üì± ${clientPhone} | üí¨ "${body}" | üìç ${hasLocation ? 'oui' : 'non'}`);
    // Test de connexion au d√©but
    console.log('üîÑ Test connexion base de donn√©es...');
    const dbTest = await testDatabaseConnection();
    
    // R√©cup√©rer la session en cours
    const session = await getSession(clientPhone);
    console.log(`üìã Session √©tat: ${session.etat || 'aucune'}`);
    
    let responseMessage = '';
    if (!dbTest.connected) {
      console.log('‚ùå Base de donn√©es Supabase indisponible');
      if (dbTest.status === 401) {
        responseMessage = `üîê Erreur d'authentification Supabase.

Cl√©s API expir√©es ou d√©sactiv√©es.
V√©rifiez les cl√©s dans Dashboard ‚Üí Settings ‚Üí API.

Status: ${dbTest.status}

Pour recommencer: √©crivez 'taxi'`;
      } else if (dbTest.status === 503) {
        responseMessage = `‚è≥ Service temporairement indisponible.

Le service est en maintenance. 
R√©essayez dans quelques minutes.

Support: ${dbTest.error?.substring(0, 100) || 'Service unavailable'}`;
      } else {
        responseMessage = `‚ùå Service indisponible.

Impossible d'acc√©der √† la base des conducteurs.
Status: ${dbTest.status || 'unknown'}

R√©essayez plus tard ou contactez le support.`;
      }
    } else if (messageText.includes('taxi')) {
      // PRIORIT√â: V√©rifier d'abord si l'utilisateur veut recommencer
      // Nettoyer toute session existante avant de recommencer
      try {
        await fetchWithRetry(`${SUPABASE_URL}/rest/v1/sessions?client_phone=eq.${encodeURIComponent(clientPhone)}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${workingApiKey}`,
            'apikey': workingApiKey,
            'Content-Type': 'application/json'
          }
        });
        console.log(`üßπ Session pr√©c√©dente nettoy√©e pour ${clientPhone}`);
      } catch (error) {
        console.error('‚ùå Erreur suppression session:', error);
      }
      
      // Cr√©er une nouvelle session
      await saveSession(clientPhone, {
        vehicleType: null,
        etat: 'initial'
      });
      responseMessage = `üöï Bienvenue chez LokoTaxi!

Quel type de taxi souhaitez-vous ?
‚Ä¢ 'moto' - Transport rapide en moto-taxi
‚Ä¢ 'voiture' - Transport en voiture

(R√©pondez par 'moto' ou 'voiture')`;
    } else if (session.etat === 'position_recue' && !hasLocation) {
      // L'utilisateur a partag√© sa position et tape maintenant sa destination
      const adresse = await searchAdresse(body);
      
      if (!adresse) {
        responseMessage = `‚ùì Destination non trouv√©e: "${body}"

Veuillez r√©essayer avec une destination connue:
‚Ä¢ Prefecture de Melun
‚Ä¢ Gare de Melun
‚Ä¢ Centre Commercial Carr√© S√©nart
‚Ä¢ Aeroport Charles de Gaulle

Ou tapez 'annuler' pour recommencer.`;
      } else {
        // Calculer la distance entre position client et destination
        // Extraire les coordonn√©es depuis le format PostGIS
        const clientCoords = await getClientCoordinates(from);
        const clientLat = clientCoords.latitude;
        const clientLon = clientCoords.longitude;
          
        // üîç DEBUG LOGS - Tracer les coordonn√©es exactes
        console.log(`üîé DEBUG coordonn√©es client depuis PostGIS:`);
        console.log(`   session.positionClient (binaire): ${session.positionClient}`);
        console.log(`   clientLatitude extraite: ${clientLat}`);
        console.log(`   clientLongitude extraite: ${clientLon}`);
        
        console.log(`üîç DEBUG destination adresse:`, JSON.stringify(adresse));
        console.log(`üìç DEBUG destination - latitude: ${adresse.latitude}, longitude: ${adresse.longitude}`);
        
        // CORRECTION: Inverser l'ordre lat/lon pour calculateDistance(lat1, lon1, lat2, lon2)
        const distanceKm = calculateDistance(clientLat, clientLon, adresse.latitude, adresse.longitude);
        
        // Calculer le prix
        const prixInfo = await calculerPrixCourse(session.vehicleType, distanceKm);
        
        // Sauvegarder les infos dans la session
        await saveSession(clientPhone, {
          ...session,
          destinationNom: adresse.nom,
          destinationId: adresse.id,
          destinationPosition: `POINT(${adresse.longitude} ${adresse.latitude})`,
          distanceKm: distanceKm,
          prixEstime: prixInfo.prix_total,
          etat: 'prix_calcule'
        });
        
        responseMessage = `üìç **R√âSUM√â DE VOTRE COURSE**

üöó Type: ${session.vehicleType.toUpperCase()}
üìç Destination: ${adresse.nom}
üìè Distance: ${distanceKm.toFixed(1)} km
üí∞ **Prix estim√©: ${prixInfo.prix_total.toLocaleString('fr-FR')} GNF**

‚ÑπÔ∏è Tarif appliqu√©: ${prixInfo.prix_par_km} GNF/km

Confirmez-vous cette r√©servation ?
‚Ä¢ R√©pondez 'oui' pour confirmer
‚Ä¢ R√©pondez 'non' pour annuler`;
      }
    } else if ((messageText === 'oui' || messageText === 'confirmer') && session.etat === 'prix_calcule') {
      // L'utilisateur confirme le prix, on cherche le conducteur
      // Extraire les coordonn√©es depuis le format PostGIS
      const clientCoords = await getClientCoordinates(from);
      const clientLat = clientCoords.latitude;
      const clientLon = clientCoords.longitude;
        
      const nearestDriver = await findNearestDriver(session.vehicleType, clientLat, clientLon);
      
      if (!nearestDriver) {
        responseMessage = `üòî D√©sol√©, aucun ${session.vehicleType} disponible actuellement.

Veuillez r√©essayer dans quelques minutes.

Pour recommencer: √©crivez 'taxi'`;
      } else {
        const etaMinutes = Math.max(5, Math.round(nearestDriver.distance * 3));
        
        // Sauvegarder la r√©servation
        const reservationData = {
          client_phone: clientPhone,
          conducteur_id: nearestDriver.id,
          vehicle_type: session.vehicleType,
          position_depart: session.positionClient,
          destination_nom: session.destinationNom,
          destination_id: session.destinationId,
          position_arrivee: session.destinationPosition,
          distance_km: session.distanceKm,
          prix_total: session.prixEstime,
          statut: 'confirmee'
        };
        
        try {
          const saveResponse = await fetchWithRetry(`${SUPABASE_URL}/rest/v1/reservations`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${workingApiKey}`,
              'apikey': workingApiKey,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(reservationData)
          });
          
          if (saveResponse.ok) {
            // Mise √† jour session
            await saveSession(clientPhone, {
              ...session,
              prixConfirme: true,
              etat: 'confirme'
            });
            
            responseMessage = `‚úÖ **R√âSERVATION CONFIRM√âE!**

üöñ **Conducteur assign√©:**
üë§ ${nearestDriver.prenom} ${nearestDriver.nom}
üì± ${nearestDriver.telephone}
üöó ${nearestDriver.vehicle_couleur} ${nearestDriver.vehicle_marque} ${nearestDriver.vehicle_modele}
üî¢ Plaque: ${nearestDriver.vehicle_plaque}
‚è±Ô∏è Arriv√©e dans: ${etaMinutes} minutes
‚≠ê Note: ${nearestDriver.note_moyenne}/5

üí∞ **Prix confirm√©: ${session.prixEstime.toLocaleString('fr-FR')} GNF**
üìç Destination: ${session.destinationNom}

Le conducteur vous contactera dans quelques instants.

Bon voyage! üöó`;
            
            // Nettoyer la session
            try {
              await fetchWithRetry(`${SUPABASE_URL}/rest/v1/sessions?client_phone=eq.${encodeURIComponent(clientPhone)}`, {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${workingApiKey}`,
                  'apikey': workingApiKey,
                  'Content-Type': 'application/json'
                }
              });
            } catch (error) {
              console.error('‚ùå Erreur suppression session:', error);
            }
          } else {
            responseMessage = `‚ö†Ô∏è Erreur lors de la sauvegarde.

Veuillez r√©essayer ou contactez le support.`;
          }
        } catch (error) {
          responseMessage = `‚ö†Ô∏è Erreur technique.

Veuillez r√©essayer plus tard.`;
          console.error('‚ùå Exception sauvegarde:', error);
        }
      }
    } else if ((messageText === 'non' || messageText === 'annuler') && session.etat === 'prix_calcule') {
      // L'utilisateur refuse le prix
      await fetchWithRetry(`${SUPABASE_URL}/rest/v1/sessions?client_phone=eq.${encodeURIComponent(clientPhone)}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${workingApiKey}`,
          'apikey': workingApiKey,
          'Content-Type': 'application/json'
        }
      });
      
      responseMessage = `‚ùå R√©servation annul√©e.

Pour une nouvelle demande: √©crivez 'taxi'`;
    } else if (messageText === 'moto' || messageText === 'voiture') {
      try {
        // V√©rifier d'abord s'il y a des conducteurs disponibles
        const conducteursDisponibles = await getAvailableDrivers(messageText);
        if (conducteursDisponibles.length === 0) {
          responseMessage = `üòî D√©sol√©, aucun ${messageText} n'est disponible actuellement.

Causes possibles:
‚Ä¢ Tous nos conducteurs ${messageText} sont occup√©s
‚Ä¢ Heure de pointe avec forte demande
‚Ä¢ Aucun conducteur ${messageText} enregistr√© dans le syst√®me

Solutions:
‚Ä¢ Essayez l'autre type: ${messageText === 'moto' ? 'voiture' : 'moto'}
‚Ä¢ R√©essayez dans quelques minutes
‚Ä¢ Contactez le support si le probl√®me persiste

Pour recommencer: √©crivez 'taxi'`;
        } else {
          await saveSession(clientPhone, {
            vehicleType: messageText,
            etat: 'vehicule_choisi'
          });
          responseMessage = `üìç Parfait! Vous avez choisi: ${messageText.toUpperCase()}

‚úÖ ${conducteursDisponibles.length} conducteur(s) ${messageText} disponible(s)

Pour calculer le prix de votre course, partagez votre position GPS:
‚Ä¢ Cliquez sur l'ic√¥ne üìé (trombone)
‚Ä¢ S√©lectionnez "Lieu"
‚Ä¢ Envoyez votre position actuelle

Ensuite, nous vous demanderons votre destination.`;
        }
      } catch (error) {
        console.error(`‚ùå Erreur v√©rification conducteurs ${messageText}:`, error);
        responseMessage = `‚ùå Erreur technique lors de la v√©rification des conducteurs.

Impossible d'acc√©der √† la base de donn√©es.
R√©essayez dans quelques minutes.

Pour recommencer: √©crivez 'taxi'`;
      }
    } else if (hasLocation) {
      try {
        const lat = parseFloat(latitude);
        const lon = parseFloat(longitude);
        console.log(`üìç Position client: ${lat}, ${lon} (lat, lon)`);
        console.log(`üîç Session: ${JSON.stringify(session)}`);
        if (!session.vehicleType) {
          responseMessage = `‚ö†Ô∏è Veuillez d'abord choisir votre type de v√©hicule.

Pour commencer: √©crivez 'taxi'`;
        } else if (session.etat === 'vehicule_choisi') {
          // Premi√®re fois qu'on re√ßoit la position, demander la destination
          await saveSession(clientPhone, {
            ...session,
            positionClient: `POINT(${lon} ${lat})`,
            etat: 'position_recue'
          });
          
          responseMessage = `üìç Position re√ßue! Merci.

üèÅ Quelle est votre destination ?

Exemples de destinations disponibles:
‚Ä¢ Prefecture de Melun
‚Ä¢ Gare de Melun
‚Ä¢ Mairie de Moissy-Cramayel
‚Ä¢ Centre Commercial Carr√© S√©nart
‚Ä¢ Tour Eiffel
‚Ä¢ Aeroport Charles de Gaulle

Tapez le nom de votre destination:`;
        } else {
          // G√©rer les autres √©tats de session si n√©cessaire
          responseMessage = `‚ö†Ô∏è √âtat de session invalide.

Pour recommencer: √©crivez 'taxi'`;
        }
      } catch (error) {
        console.error('üí• Erreur traitement:', error);
        responseMessage = `üí• Erreur technique.

${error.message}
Pour recommencer: √©crivez 'taxi'`;
      }
    } else if (messageText.includes('annuler')) {
      responseMessage = `‚ùå R√©servation annul√©e.

Pour une nouvelle demande: √©crivez 'taxi'`;
    } else {
      responseMessage = `üöï Bienvenue chez LokoTaxi Conakry!

Pour commencer votre r√©servation:
üìù √âcrivez 'taxi'

Service disponible 24h/24`;
    }
    const twiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Message>${responseMessage}</Message>
</Response>`;
    console.log(`üì§ R√©ponse: ${responseMessage.substring(0, 100)}...`);
    return new Response(twiml, {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/xml; charset=utf-8'
      }
    });
  } catch (error) {
    console.error('üí• Erreur globale:', error);
    const errorTwiml = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Message>üí• Erreur technique temporaire.

R√©essayez dans quelques minutes.
Support: √©crivez 'taxi'</Message>
</Response>`;
    return new Response(errorTwiml, {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'text/xml; charset=utf-8'
      }
    });
  }
});
