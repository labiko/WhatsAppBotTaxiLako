// ========================================
// TEST INDIVIDUEL DE CHAQUE FONCTION
// Appelez directement la fonction que vous voulez tester
// ========================================

import { 
  initializeSearchService,
  searchInDatabaseSmart,
  searchInGooglePlaces,
  searchLocationGeneric,
  searchLocation,
  searchLocationWithSuggestions,
  normalizeText,
  generatePermutations
} from './search-service.ts';

// Configuration globale
const CONFIG = {
  supabaseUrl: 'https://nmwnibzgvwltipmtwhzo.supabase.co',
  supabaseKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5td25pYnpndndsdGlwbXR3aHpvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcyMTEyOTgzMCwiZXhwIjoyMDM2NzA1ODMwfQ.4-ccQNbWTDNs9DhHBdYTw2vJlUSP3-VGEu5yzxWnAu8',
  googleApiKey: undefined, // √Ä d√©finir si besoin
  primarySource: 'database' as const,
  fuzzyThreshold: 0.3,
  maxSuggestions: 10,
  logLevel: 'debug' as const
};

// Initialisation automatique
let initialized = false;
async function ensureInitialized() {
  if (!initialized) {
    await initializeSearchService(CONFIG);
    initialized = true;
    console.log('‚úÖ Service initialis√©');
  }
}

// ========================================
// FONCTIONS DE TEST INDIVIDUELLES
// ========================================

// 1. TEST searchInDatabaseSmart
export async function testSearchInDatabaseSmart(
  query: string, 
  maxResults: number = 5,
  logLevel: 'minimal' | 'detailed' | 'debug' = 'detailed'
) {
  console.log(`üîç TEST searchInDatabaseSmart("${query}")`);
  console.log('=' .repeat(50));
  
  await ensureInitialized();
  
  const startTime = Date.now();
  const results = await searchInDatabaseSmart(query, { maxResults, logLevel });
  const elapsed = Date.now() - startTime;
  
  console.log(`\nüìä R√âSULTATS: ${results.length} trouv√©(s) en ${elapsed}ms`);
  
  results.forEach((r, i) => {
    console.log(`\n${i+1}. üìç ${r.name}`);
    console.log(`   üéØ Source: ${r.source}`);
    console.log(`   ‚≠ê Score: ${r.score}`);
    console.log(`   üìù Adresse: ${r.address}`);
    if (r.coords) {
      console.log(`   üåç GPS: ${r.coords.lat}, ${r.coords.lng}`);
    }
    if (r.matchDetails) {
      console.log(`   üîß Strat√©gie: ${r.matchDetails.strategy}`);
      if (r.matchDetails.matchedWith) {
        console.log(`   üîÑ Match√© avec: "${r.matchDetails.matchedWith}"`);
      }
    }
  });
  
  return results;
}

// 2. TEST searchInGooglePlaces
export async function testSearchInGooglePlaces(
  query: string,
  maxResults: number = 5
) {
  console.log(`üåê TEST searchInGooglePlaces("${query}")`);
  console.log('=' .repeat(50));
  
  await ensureInitialized();
  
  const results = await searchInGooglePlaces(query, { maxResults });
  
  console.log(`\nüìä R√âSULTATS Google Places: ${results.length}`);
  
  results.forEach((r, i) => {
    console.log(`\n${i+1}. üåê ${r.name}`);
    console.log(`   üìù ${r.address}`);
    console.log(`   üåç GPS: ${r.coords?.lat}, ${r.coords?.lng}`);
  });
  
  return results;
}

// 3. TEST searchLocationGeneric (fonction principale)
export async function testSearchLocationGeneric(
  query: string,
  maxResults: number = 5,
  logLevel: 'minimal' | 'detailed' | 'debug' = 'detailed'
) {
  console.log(`üéØ TEST searchLocationGeneric("${query}")`);
  console.log('=' .repeat(50));
  
  await ensureInitialized();
  
  const results = await searchLocationGeneric(query, { maxResults, logLevel });
  
  console.log(`\nüìä R√âSULTATS COMPLETS: ${results.length}`);
  
  results.forEach((r, i) => {
    console.log(`\n${i+1}. üìç ${r.name}`);
    console.log(`   üéØ Source: ${r.source}`);
    console.log(`   ‚≠ê Score: ${r.score}`);
  });
  
  return results;
}

// 4. TEST searchLocation (fonction pour bot)
export async function testSearchLocation(query: string) {
  console.log(`ü§ñ TEST searchLocation("${query}") - Format Bot`);
  console.log('=' .repeat(50));
  
  const result = await searchLocation(query, CONFIG.supabaseUrl, CONFIG.supabaseKey);
  
  if (result) {
    console.log(`\n‚úÖ R√âSULTAT (format bot):`);
    console.log(`   üìç Nom: ${result.nom}`);
    console.log(`   üìù Adresse: ${result.adresse_complete}`);
    console.log(`   üåç GPS: ${result.latitude}, ${result.longitude}`);
  } else {
    console.log(`\n‚ùå Aucun r√©sultat trouv√©`);
  }
  
  return result;
}

// 5. TEST searchLocationWithSuggestions
export async function testSearchLocationWithSuggestions(
  query: string,
  maxSuggestions: number = 5
) {
  console.log(`üí° TEST searchLocationWithSuggestions("${query}")`);
  console.log('=' .repeat(50));
  
  const results = await searchLocationWithSuggestions(query, maxSuggestions);
  
  console.log(`\nüìä SUGGESTIONS: ${results.length}`);
  
  results.forEach((r, i) => {
    console.log(`\n${i+1}. üí° ${r.nom}`);
    console.log(`   üéØ Source: ${r.source}`);
    console.log(`   ‚≠ê Score: ${r.score}`);
  });
  
  return results;
}

// 6. TEST normalizeText
export function testNormalizeText(text: string) {
  console.log(`üìù TEST normalizeText("${text}")`);
  console.log('=' .repeat(50));
  
  const normalized = normalizeText(text);
  console.log(`\nüìù Original: "${text}"`);
  console.log(`üìù Normalis√©: "${normalized}"`);
  
  return normalized;
}

// 7. TEST generatePermutations
export function testGeneratePermutations(words: string[]) {
  console.log(`üîÑ TEST generatePermutations([${words.join(', ')}])`);
  console.log('=' .repeat(50));
  
  const perms = generatePermutations(words);
  console.log(`\nüîÑ ${perms.length} permutations g√©n√©r√©es:`);
  
  perms.forEach((perm, i) => {
    console.log(`   ${i+1}. "${perm.join(' ')}"`);
  });
  
  return perms;
}

// ========================================
// EXEMPLES D'UTILISATION
// ========================================

// D√©commentez pour tester :

/* 
// Test 1: Recherche en base avec faute de frappe
await testSearchInDatabaseSmart('mardina march√©', 5, 'debug');

// Test 2: Google Places
await testSearchInGooglePlaces('restaurant conakry', 3);

// Test 3: Fonction principale
await testSearchLocationGeneric('2LK Restaurant', 8, 'detailed');

// Test 4: Format bot
await testSearchLocation('H√¥pital Ignace Deen');

// Test 5: Suggestions multiples
await testSearchLocationWithSuggestions('march√©', 10);

// Test 6: Normalisation
testNormalizeText('Caf√©-Restaurant "Le Bon C√¥t√©"');

// Test 7: Permutations
testGeneratePermutations(['march√©', 'madina', 'centre']);
*/

console.log('üéØ FONCTIONS DE TEST DISPONIBLES:');
console.log('================================');
console.log('‚Ä¢ testSearchInDatabaseSmart(query, maxResults?, logLevel?)');
console.log('‚Ä¢ testSearchInGooglePlaces(query, maxResults?)');
console.log('‚Ä¢ testSearchLocationGeneric(query, maxResults?, logLevel?)');
console.log('‚Ä¢ testSearchLocation(query)');
console.log('‚Ä¢ testSearchLocationWithSuggestions(query, maxSuggestions?)');
console.log('‚Ä¢ testNormalizeText(text)');
console.log('‚Ä¢ testGeneratePermutations(words[])');
console.log('\nüí° Exemple:');
console.log('await testSearchInDatabaseSmart("mardina march√©", 5, "debug");');